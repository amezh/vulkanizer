#version 450

#extension GL_EXT_shader_8bit_storage: require
#extension GL_EXT_shader_16bit_storage: require
#extension GL_NV_mesh_shader: require
#extension GL_KHR_shader_subgroup_ballot: require

#include "shader_constants.h"
#include "shader_common.h"

layout(local_size_x = kShaderGroupSizeNV) in;

layout(binding = 0) readonly buffer Meshlets { Meshlet meshlets[]; };

taskNV out Task
{
	uint meshletIndices[kShaderGroupSizeNV];
} outTask;

layout (push_constant) uniform block
{
    PerFrameData perFrameData;
};

void main()
{
	uint groupThreadIndex = gl_LocalInvocationID.x;
	uint meshletIndex = gl_GlobalInvocationID.x;

	vec3 coneApex = (perFrameData.model * vec4(
		meshlets[meshletIndex].center[0],
		meshlets[meshletIndex].center[1],
		meshlets[meshletIndex].center[2], 1.0)).xyz;
	
	vec3 coneAxis = (perFrameData.model * vec4(
		int(meshlets[meshletIndex].coneAxis[0]) / 127.0,
		int(meshlets[meshletIndex].coneAxis[1]) / 127.0,
		int(meshlets[meshletIndex].coneAxis[2]) / 127.0, 1.0)).xyz;

	vec3 cameraPosition = perFrameData.cameraPosition;
	float coneCutoff = int(meshlets[meshletIndex].coneCutoff) / 127.0;
	
	bool coneCulled =
		perFrameData.enableMeshletConeCulling == 1 &&
		dot(normalize(coneApex - cameraPosition), coneAxis) >= coneCutoff;

	bool frustumCulled = false;
	for(int i = 0; i < 6; ++i)
	{
		frustumCulled = frustumCulled ||
			dot(vec4(coneApex, 1.0), perFrameData.frustumPlanes[i]) + meshlets[meshletIndex].radius < 0.0;
	}
	frustumCulled = frustumCulled && perFrameData.enableMeshletFrustumCulling == 1;

	bool visible = !coneCulled && !frustumCulled;
	uvec4 visibleBallot = subgroupBallot(visible);
	
	if (visible)
	{
		uint subgroupLocalMeshletIndex = subgroupBallotExclusiveBitCount(visibleBallot);
		outTask.meshletIndices[subgroupLocalMeshletIndex] = meshletIndex;
	}
	
	if (groupThreadIndex == 0)
	{
		uint visibleMeshletCount = subgroupBallotBitCount(visibleBallot);
		gl_TaskCountNV = visibleMeshletCount;
	}
}
